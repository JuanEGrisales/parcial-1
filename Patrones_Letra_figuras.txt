PATRONES DEL ABECERARIO Y SIGNOS QUE SON NECESARIOS

************************************************
/*
while (palabra[i]!='\0') {

        switch (palabra[i]) {

        case 'a':case 'A':
        *ptr={126;*(ptr+1)=255;*(ptr+2)=231;*(ptr+3)=231;
        *(ptr+4)=255;*(ptr+5)=255;*(ptr+5)=231;*(ptr+5)=231;    
        break;
        case 'b':case 'B':
        *ptr=0;*(ptr+1)=254;*(ptr+2)=195;*(ptr+3)=195;
        *(ptr+4)=254;*(ptr+5)=195;*(ptr+5)=195;*(ptr+5)=254;    
        break;
        case 'c':case 'C':
        *ptr=126;*(ptr+1)=255;*(ptr+2)=195;*(ptr+3)=192;
        *(ptr+4)=192;*(ptr+5)=195;*(ptr+5)=255;*(ptr+5)=126;    
        break;
        case 'd':case 'D':
        *ptr=252;*(ptr+1)=254;*(ptr+2)=195;*(ptr+3)=195;
        *(ptr+4)=195;*(ptr+5)=195;*(ptr+5)=254;*(ptr+5)=252;    
        break;
        case 'e':case 'E':
        *ptr=254;*(ptr+1)=254;*(ptr+2)=192;*(ptr+3)=252;
        *(ptr+4)=252;*(ptr+5)=192;*(ptr+5)=254;*(ptr+5)=254;    
        break;
        case 'f':case 'F':
        *ptr=62;*(ptr+1)=126;*(ptr+2)=96;*(ptr+3)=124;
        *(ptr+4)=124;*(ptr+5)=98;*(ptr+5)=96;*(ptr+5)=96;    
        break;
        case 'g':case 'G':
        *ptr=124;*(ptr+1)=255;*(ptr+2)=192;*(ptr+3)=207;
        *(ptr+4)=201;*(ptr+5)=193;*(ptr+5)=255;*(ptr+5)=124;    
        break;
        case 'h':case 'H':
        *ptr=102;*(ptr+1)=102;*(ptr+2)=102;*(ptr+3)=126;
        *(ptr+4)=126;*(ptr+5)=102;*(ptr+5)=102;*(ptr+5)=102;    
        break;
        case 'i':case 'I':
        *ptr=126;*(ptr+1)=126;*(ptr+2)=24;*(ptr+3)=24;
        *(ptr+4)=24;*(ptr+5)=24;*(ptr+5)=126;*(ptr+5)=126;    
        break;
        case 'j':case 'J':
        *ptr=28;*(ptr+1)=28;*(ptr+2)=12;*(ptr+3)=12;
        *(ptr+4)=12;*(ptr+5)=108;*(ptr+5)=124;*(ptr+5)=56;    
        break;
        case 'k':case 'K':
        *ptr=102;*(ptr+1)=110;*(ptr+2)=120;*(ptr+3)=112;
        *(ptr+4)=120;*(ptr+5)=108;*(ptr+5)=102;*(ptr+5)=102;    
        break;
        case 'l':case 'L':
        *ptr=96;*(ptr+1)=96;*(ptr+2)=96;*(ptr+3)=96;
        *(ptr+4)=96;*(ptr+5)=96;*(ptr+5)=126;*(ptr+5)=126;    
        break;
        case 'm':case 'M':
        *ptr=195;*(ptr+1)=231;*(ptr+2)=231;*(ptr+3)=255;
        *(ptr+4)=219;*(ptr+5)=195;*(ptr+5)=195;*(ptr+5)=195;    
        break;
        case 'n':case 'N':
        *ptr=195;*(ptr+1)=227;*(ptr+2)=243;*(ptr+3)=251;
        *(ptr+4)=223;*(ptr+5)=207;*(ptr+5)=199;*(ptr+5)=195;    
        break;
        case 'o':case 'O':
        *ptr=126;*(ptr+1)=255;*(ptr+2)=195;*(ptr+3)=195;
        *(ptr+4)=195;*(ptr+5)=195;*(ptr+5)=255;*(ptr+5)=126;    
        break;
        case 'p':case 'P':
        *ptr=124;*(ptr+1)=102;*(ptr+2)=102;*(ptr+3)=102;
        *(ptr+4)=124;*(ptr+5)=96;*(ptr+5)=96;*(ptr+5)=96;    
        break;
        case 'q':case 'Q':
        *ptr=126;*(ptr+1)=255;*(ptr+2)=195;*(ptr+3)=203;
        *(ptr+4)=207;*(ptr+5)=199;*(ptr+5)=254;*(ptr+5)=125;    
        break;
        case 'r':case 'R':
        *ptr=124;*(ptr+1)=102;*(ptr+2)=102;*(ptr+3)=102;
        *(ptr+4)=124;*(ptr+5)=108;*(ptr+5)=102;*(ptr+5)=99;    
        break;
        case 's':case 'S':
        *ptr=60;*(ptr+1)=102;*(ptr+2)=96;*(ptr+3)=96;
        *(ptr+4)=60;*(ptr+5)=6;*(ptr+5)=102;*(ptr+5)=60;    
        break;
        case 't':case 'T':
        *ptr=126;*(ptr+1)=126;*(ptr+2)=24;*(ptr+3)=24;
        *(ptr+4)=24;*(ptr+5)=24;*(ptr+5)=24;*(ptr+5)=24;    
        break;
        case 'u':case 'U':
        *ptr=102;*(ptr+1)=102;*(ptr+2)=102;*(ptr+3)=102;
        *(ptr+4)=102;*(ptr+5)=102;*(ptr+5)=126;*(ptr+5)=60;    
        break;
        case 'v':case 'V':
        *ptr=102;*(ptr+1)=102;*(ptr+2)=102;*(ptr+3)=102;
        *(ptr+4)=102;*(ptr+5)=102;*(ptr+5)=60;*(ptr+5)=24;    
        break;
        case 'w':case 'W':
        *ptr=195;*(ptr+1)=195;*(ptr+2)=195;*(ptr+3)=195;
        *(ptr+4)=219;*(ptr+5)=219;*(ptr+5)=126;*(ptr+5)=36;    
        break;
        case 'x':case 'X':
        *ptr=231;*(ptr+1)=231;*(ptr+2)=102;*(ptr+3)=60;
        *(ptr+4)=60;*(ptr+5)=102;*(ptr+5)=231;*(ptr+5)=231;    
        break;
        case 'y':case 'Y':
        *ptr=102;*(ptr+1)=102;*(ptr+2)=102;*(ptr+3)=60;
        *(ptr+4)=24;*(ptr+5)=24;*(ptr+5)=24;*(ptr+5)=24;    
        break;
        case 'z':case 'Z':
        *ptr=126;*(ptr+1)=126;*(ptr+2)=6;*(ptr+3)=12;
        *(ptr+4)=24;*(ptr+5)=48;*(ptr+5)=126;*(ptr+5)=126;    
        break;

        }


        i++;
    }
/*


    #include<iostream>


using namespace std;

void crearDatos();
void mostrarMatriz (int **puntero, int nfilas, int ncol);
void modificarPosicion(int **puntero_matriz, int f, int c, int x);

int **puntero_matriz,nfilas,ncol;

int main()
{
    int x=0,f,c;

    crearDatos();
    mostrarMatriz(puntero_matriz,nfilas,ncol);
    while (x==0 || x==1) {
      cout<<endl;
        cout<<"ingrese la fila 1-8: "<<endl;
        cin >>f;
        f--;
        cout<<"ingrese la columna 1-8: "<<endl;
        cin>>c;
        c--;
        cout<<"ingrese la el valor Uno (1) o Cero (0) 1 otro numero cuando quieras salir: "<<endl;
        cin>>x;
        system("cls");
        if (x==0 ||x==1){
            modificarPosicion(puntero_matriz,f,c,x);
            mostrarMatriz(puntero_matriz,nfilas,ncol);
        }
       


 }



    return 0;
}

void crearDatos(){
    nfilas=8;
    ncol=8;

    puntero_matriz= new int*[nfilas];
    for(int i=0; i<nfilas;i++){
        puntero_matriz[i] = new int [ncol];

    }
    for(int i=0; i<nfilas;i++){
        for(int j=0; j< ncol; j++){
            *(*(puntero_matriz+i)+j)=0;
        }
    }
}

void mostrarMatriz (int **puntero, int nfilas, int ncol){
    for(int i=0; i<nfilas;i++){
        for(int j=0; j<ncol; j++){
        cout <<*(*(puntero_matriz+i)+j)<<"  ";
        }
        cout<<endl;
    }

}
void modificarPosicion(int **puntero_matriz, int f, int c, int x){
    *(*(puntero_matriz+f)+c)=x;
}
